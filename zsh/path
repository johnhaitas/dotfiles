if [ -d ${HOME}/bin ]; then PATH=${HOME}/bin:${PATH}; fi
if [ -d ${HOME}/.bin ]; then PATH=${HOME}/.bin:${PATH}; fi
if [ -d ${HOME}/.brew/bin ];  then PATH=${HOME}/.brew/bin:${PATH};  fi
if [ -d ${HOME}/.depot_tools ]; then PATH=${HOME}/.depot_tools:${PATH}; fi

# EC2
if [ -d ${HOME}/.ec2 ]; then
	export EC2_HOME=~/.ec2
	export PATH=$PATH:$EC2_HOME/bin
	export EC2_PRIVATE_KEY=`ls $EC2_HOME/pk-*.pem`
	export EC2_CERT=`ls $EC2_HOME/cert-*.pem`
fi

if [ -d "/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java_home" ]; then 
	export JAVA_HOME="/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java_home"; 
fi

if [ -d /usr/local/mysql/bin ]; then PATH=/usr/local/mysql/bin:${PATH}; fi

# Ruby
if which rbenv > /dev/null; then
	eval "$(rbenv init -)";
else;
	if [ -d $HOME/.rvm/bin ]; then
		PATH=$PATH:$HOME/.rvm/bin;
	fi;
fi

# Go
GO_PATH="/usr/local/go/bin";
if [ -d "${GO_PATH}" ]; then
	PATH="${GO_PATH}:${PATH}"
fi

GCLOUD_SDK_PATH="${HOME}/google-cloud-sdk"
if [ -d ${GCLOUD_SDK_PATH} ]; then
	# The next line enables shell command completion for gcloud.
	source "${GCLOUD_SDK_PATH}/path.zsh.inc"
fi

PYENV_ROOT="$HOME/.pyenv"
if [[ -d ${PYENV_ROOT} ]]; then
	export PYENV_ROOT
	PATH="$PYENV_ROOT/shims:$PATH"
fi

FLUTTER_PATH="${HOME}/src/flutter/bin"
if [[ -d "${FLUTTER_PATH}" ]]; then
	PATH="$FLUTTER_PATH:$PATH"
fi

FLUTTER_DART_SDK="${FLUTTER_PATH}/cache/dart-sdk/bin"
if [[ -d "${FLUTTER_DART_SDK}" ]]; then
	PATH="$FLUTTER_DART_SDK:$PATH"
fi

ANDROID_HOME=$HOME/Library/Android/sdk
if [[ -d "${ANDROID_HOME}" ]]; then
	export ANDROID_HOME
	PATH=$PATH:$ANDROID_HOME/emulator
	PATH=$PATH:$ANDROID_HOME/tools
	PATH=$PATH:$ANDROID_HOME/tools/bin
	PATH=$PATH:$ANDROID_HOME/platform-tools
fi

#OPENSSL_PATH="/usr/local/opt/openssl"
#if [[ -d "${OPENSSL_PATH}" ]]; then
#	PATH="${OPENSSL_PATH}/bin:$PATH"
#	export LDFLAGS="-L${OPENSSL_PATH}/lib ${LDFLAGS}"
#	export CPPFLAGS="-I${OPENSSL_PATH}/include ${CPPFLAGS}"
#	export PKG_CONFIG_PATH="${OPENSSL_PATH}/lib/pkgconfig:${PKG_CONFIG_PATH}"
#fi

HYPERLEDGER_FABRIC_PATH="${HOME}/src/hyperledger/fabric-samples/bin"
if [[ -d "${HYPERLEDGER_FABRIC_PATH}" ]]; then
	PATH="${HYPERLEDGER_FABRIC_PATH}:${PATH}"
fi

export NVM_DIR="$HOME/.nvm"
if [[ -d "${NVM_DIR}" ]]; then
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

	# place this after nvm initialization!
	autoload -U add-zsh-hook
	load-nvmrc() {
	local node_version="$(nvm version)"
	local nvmrc_path="$(nvm_find_nvmrc)"

	if [ -n "$nvmrc_path" ]; then
		local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

		if [ "$nvmrc_node_version" = "N/A" ]; then
		nvm install
		elif [ "$nvmrc_node_version" != "$node_version" ]; then
		nvm use
		fi
	elif [ "$node_version" != "$(nvm version default)" ]; then
		echo "Reverting to nvm default version"
		nvm use default
	fi
	}
	add-zsh-hook chpwd load-nvmrc
	load-nvmrc
fi

#PATH="node_modules/.bin:${PATH}"

export PATH
